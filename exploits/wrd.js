
if (process.platform != "win32") return require("./null");



const { dialog } = require('electron')
const fs = require("fs")
const path = require("path")
const homedir = require('os').homedir();
const child_process = require('child_process')
const fetch = require("node-fetch")

JELLYFISH_DATA_DIR = global.JELLYFISH_DATA_DIR


function init() {}

function downloadInitialScripts() {}



function runScript(arg) {
    net.connect("\\\\.\\pipe\\WeAreDevsPublicAPI_Lua",console.log).end(arg)
}

var firstInject = true



async function update() {
    var vf = await fetch("https://cdn.wearedevs.net/software/exploitapi/latestdata.txt")
    var vv = (await vf.text()).split(" ")
    var updated = vv[0]
    if (updated != "true") return false
    var df = await fetch(vv[1])
    var db = await df.buffer()
    db.pipe(fs.createWriteStream(path.join(JELLYFISH_DATA_DIR,"wrd_exploit.dll")))    
    return new Promise((a,r)=>{db.on("end",()=>{a(true)})})
}

async function checkCreds(event,arg) {
    event.reply("login-success")
    setTimeout(function() {
        event.reply("enable-inject-btn")
    },2000)
    return true
}

async function inject(event,arg) {
    var win = global.win
    event.reply("set-inject-btn-text","Updating")
    var updated = await update()
    if (!updated) {
        dialog.showMessageBoxSync(win,{
            message: "WRD isn't updated.",
            detail: "Please wait for WRD to update it!",
        })
        event.reply("set-inject-btn-text","Not updated")
        return setTimeout(function() {
            event.reply("enable-inject-btn")
        },2000)
    }
    event.reply("set-inject-btn-text","Injecting")
    child_process.spawnSync()
}

module.exports = {init,downloadInitialScripts,checkCreds,inject,runScript}