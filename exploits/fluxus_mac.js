
if (process.platform != "darwin") return module.exports = require("./null");


const { dialog,BrowserWindow } = require('electron')
const fs = require("fs")
const path = require("path")
const homedir = require('os').homedir();
const child_process = require('child_process')
const fetch = require("node-fetch")
const ps = require("ps-node");
const prompt = require('../electron-prompt/lib/index');


const DEFAULT_CAPPS_LOCATION = path.join(homedir,"Documents","Fluxus")
JELLYFISH_DATA_DIR = global.JELLYFISH_DATA_DIR


function init() {
    if (!fs.existsSync("/tmp/script")) {
        fs.writeFileSync("/tmp/script","")
    }
    if (!fs.existsSync(path.join(DEFAULT_CAPPS_LOCATION,"lib2proc"))) {
        child_process.execSync(`rm -rf "${DEFAULT_CAPPS_LOCATION}";mkdir "${DEFAULT_CAPPS_LOCATION}";cd ${DEFAULT_CAPPS_LOCATION}; curl https://fluxteam.xyz/mac/lib2proc.zip > deps.zip;unzip deps.zip`)
    }
    if (dialog.showMessageBoxSync(win,{
        message: "Join the Fluxus Discord?",
        detail: "If you're not in it, make sure to join the Fluxus Discord server for updates and support.",
        buttons: ["Sure","Dismiss"],
        defaultId: 1,
    }) != 1) {
        child_process.spawnSync("open",["http://fluxteam.xyz/external-files/discord.php"])
    }
    watch()
}
var lastUpdate = 0
    
function watch() {
    fs.watch("/tmp/script").on("change",() => {
        if (process.uptime() - lastUpdate > 0.01) {
            console.log("noooo! you cant just have an icon spin as confirmation")
            win.webContents.send("script-ran")
            watch()
        }
        lastUpdate = process.uptime()
    })
}
function downloadInitialScripts() {
    
}

function runScript(arg) {
    fs.writeFileSync("/tmp/script", arg)
}

var firstInject = true


async function needsToLogin() {
    return false;
}


async function update() {
    child_process.execSync('curl -s "https://fluxteam.xyz/mac/libFluxus.dylib" > "' + path.join(DEFAULT_CAPPS_LOCATION,"libFluxus.dylib") + '";rm -rf deps.zip __MACOSX;')
    
}

async function checkCreds(event,arg) {
    event.reply("login-success")
    setTimeout(function() {
        event.reply("enable-inject-btn")
    },2000)
        return true
    
}

function getRobloxPid() {
   return new Promise(function(a,r) {
        ps.lookup({
            command: 'RobloxPlayer',
            }, function(err, resultList ) {
                if (err) r(err);
                if (!resultList[0]) return a(undefined);
                a(resultList[0].pid)
        });
   })
}

getHwid = () => child_process.execSync("ioreg -d2 -c IOPlatformExpertDevice | awk -F\\\" '/IOPlatformUUID/{print $(NF-1)}' | sed -e 's/-//g'").toString().trim()
/*
async function validateKey() {
    try {
        var hwid = global.hwid || getHwid()
        global.hwid = hwid 
        console.log("hwid is ",hwid)
        var keyFile = fs.existsSync("/tmp/keyresponse") ? fs.readFileSync("/tmp/keyresponse").toString().trim() : undefined
        console.log("Saved key",keyFile)
        if (keyFile) {
            var validated = await (await fetch(`https://fluxteam.xyz/ks/checkpoint/Verify.php?Key=${encodeURIComponent(keyFile)}&HWID=${encodeURIComponent(hwid)}`)).text()
            if (!validated.startsWith("no")) return fs.writeFileSync("/tmp/keyresponse",validated)
        }
        console.log("starting key flow")

        var ks = await fetch("https://fluxteam.xyz/ks/checkpoint/Start.php?HWID=" + encodeURIComponent(hwid) + "&MACM=1", {
            headers: {
                "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.0 Safari/605.1.15"
            }
        })
        var keyStart = await (ks).text()
        console.log(keyStart)
        if (keyStart.includes("already have a whitelisted key")) {
            var key = keyStart.split(": ")[1]
            console.log("already whitelisted",key)
            fs.writeFileSync("/tmp/keyresponse",key)
            return validateKey()
        }
        console.log("opening modal")
        var starttime = process.uptime()
        await new Promise(function(modalFinished) {
            var modal = new BrowserWindow({
                width: 1200,//1200,
                height: 550, //550,
                parent: global.win,
                modal: true,
                transparent: false,
                title: "Fluxus Key",
                webPreferences: {
                    zoomFactor: 0.8
                }
            })
            
            var linkvertise = ks.headers.get("refresh").split(" URL=")[1]
            console.log("linkvertise link: ",linkvertise)
            modal.loadURL(linkvertise, {userAgent: "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.0 Safari/605.1.15"})
            modal.webContents.on("will-navigate",(evt,url) => {
                console.log(url)
                if (url.includes("fluxteam.xyz/ks") || url.includes("data:text/html")) { 
                    modal.setSize(380,185,true)
                } else {
                    modal.setSize(1200,550,true)
                }
            })
            modal.webContents.on("new-window",async (evt,url,_,__,___,____,ref) => {
                evt.preventDefault();
                console.log("telling the pop up to fuck off")
                console.log(evt.sender.history.length)
                if (evt.sender.history.length == 1) {
                    console.log("first linkvertise complete?")
                    // Show waiting page so user isn't stuck at loading for 10 seconds
                    var timeLeft = (starttime + 15) - process.uptime() 
                    
                    if (timeLeft > 0) {
                        modal.setSize(380,195,true)
                        modal.loadURL(`data:text/html;charset=utf-8,%3Cstyle%3E*%7Bmargin%3A0%3Bpadding%3A0%3Bbox-sizing%3Aborder-box%3Bfont-family%3ASegoe%20UI%2CFrutiger%2CFrutiger%20Linotype%2CDejavu%20Sans%2CHelvetica%20Neue%2CArial%2Csans-serif%7Dhtml%2Cbody%7Bheight%3A100%25%3Bbackground%3A%23f5f5f5%7D.keysyscontainer%7Bheight%3A100%25%3Bdisplay%3Aflex%3Balign-items%3Acenter%3Bjustify-content%3Acenter%3Bflex-direction%3Acolumn%7D.box%7Bwidth%3A460px%3Bbackground%3A%23fff%3Bborder-radius%3A3px%3Bborder%3A1px%20solid%20%23dcdcdc%3Bpadding%3A24px%3Bmargin%3A8px%200%7D.button%7Bmargin-left%3A10px%7D.title%7Bfont-size%3A20px%3Bfont-weight%3A500%3Bdisplay%3Ablock%3Bmargin-bottom%3A8px%3Bcolor%3A%23323232%7D.text%7Bfont-size%3A14px%3Bcolor%3A%23646464%3Bdisplay%3Ablock%3Bmargin-bottom%3A22px%7D.key%7Bposition%3Arelative%3Bmargin-bottom%3A10px%7D.button%7Bborder%3Anone%3Bcolor%3A%23fff%3Bpadding%3A15px%2032px%3Btext-align%3Acenter%3Btext-decoration%3Anone%3Bdisplay%3Ainline-block%3Bfont-size%3A16px%3Bmargin%3A4px%202px%3Bcursor%3Apointer%7D.Copy%7Bbackground-color%3A%233276b1%7D%0A%0A%3C%2Fstyle%3E%3Cdiv%20class%3D%22keysyscontainer%22%3E%0A%3Cdiv%20class%3D%22box%22%3E%0A%3Cspan%20class%3D%22title%22%3EFluxus%20KeySystem%20%7C%20Please%20wait%3C%2Fspan%3E%0A%3Cspan%20class%3D%22text%22%3E%20You%20have%20gone%20through%20the%20first%20Linkvertise%2C%20but%20before%20we%20can%20send%20you%20on%20to%20the%20next%20one%2C%20wait%20for%20about%20${Math.ceil(timeLeft)}%20seconds.%20%3C%2Fspan%3E%0A%3Cspan%20class%3D%22text%22%3E%20No%20one%20likes%20advertisments%2C%20but%20going%20through%20this%20supports%20the%20creators%20of%20Fluxus.%20%3C%2Fspan%3E%0A%0A%3C%2Fdiv%3E%3C%2Fdiv%3E`)
                        await new Promise((a,r) => setTimeout(a,timeLeft * 1000))
                    }
                    
                    modal.loadURL("https://fluxteam.xyz/ks/checkpoint/Check1.php")
                } else if (evt.sender.history.length >= 3) {
                    console.log("second linkvertise complete?")
                    modal.destroy()
                    modalFinished()
                }  
                
            })
        })
        console.log("closed modal")
        await new Promise((a,r) => setTimeout(a,5000))
        console.log("getting key")
        var fin = await fetch("https://fluxteam.xyz/ks/checkpoint/Main.php", {
            headers: {
                "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.0 Safari/605.1.15"
            }
        })
        var finnish = await fin.text()
        console.log(finnish)
        var key = finnish.split("var e = \"")[1].split("\";")[0]
        console.log(key)
        console.log("Registering key")
        
        var response = await fetch(`https://fluxteam.xyz/ks/checkpoint/Verify.php?Key=${key}=&HWID=${hwid}`)
        var responseTxt = await response.text()
        console.log("Response",responseTxt)
        fs.writeFileSync("/tmp/keyresponse",responseTxt)
        return validateKey()

    } catch(e) {
        console.error(e)
        return "no"
    }
    

}
*/

async function manuallyGetKey() {
    var hwid = global.hwid || getHwid()
    global.hwid = hwid  
    console.log("hwid is ",hwid)
    var keyFile = fs.existsSync("/tmp/keyresponse") ? fs.readFileSync("/tmp/keyresponse").toString().trim() : undefined
    console.log("Saved key",keyFile)
    if (keyFile) {
        var validated = await (await fetch(`https://fluxteam.xyz/ks/checkpoint/Verify.php?Key=${encodeURIComponent(keyFile)}&HWID=${encodeURIComponent(hwid)}`)).text()
        if (!validated.startsWith("no")) return fs.writeFileSync("/tmp/keyresponse",validated)
    }
    child_process.spawnSync("open",[`https://fluxteam.xyz/ks/checkpoint/Start.php?HWID=${encodeURIComponent(hwid)}&MACM=1`])
    var inputKey = await prompt({
        title: "Please enter a Fluxus Key",
        label: `If you don't have a key, please <a  href="javascript:require('child_process').spawnSync('open',['https://fluxteam.xyz/ks/checkpoint/Start.php?HWID=${encodeURIComponent(hwid)}&MACM=1'])">get one</a>`,
        value: hwid,
        useHtmlLabel:true,
        type: "input"
    },global.win)
    if (inputKey === null) return "no"
    var response = await fetch(`https://fluxteam.xyz/ks/checkpoint/Verify.php?Key=${inputKey}=&HWID=${hwid}`)
    var responseTxt = await response.text()
    console.log("Response",responseTxt)
    fs.writeFileSync("/tmp/keyresponse",responseTxt)
    if (responseTxt.startsWith("no")) {
        return manuallyGetKey()
    } else {
        return responseTxt
    }
}

async function inject(event,arg) {
    var win = global.win
    event.reply("set-inject-btn-text","Validating key")
    if (await manuallyGetKey() == "no") {
        setTimeout(function() {
            event.reply("enable-inject-btn")
        },2000)
        return event.reply("set-inject-btn-text","Cancelled")
    }

    event.reply("set-inject-btn-text","Updating")
    await update()

    event.reply("set-inject-btn-text","Injecting")
    var pid = await getRobloxPid()
    console.log(pid)
    if (!pid) {
        dialog.showMessageBoxSync(win,{
            message: "Roblox isn't running",
            detail: "We couldn't inject into Roblox, well, because there's no Roblox to inject into!",
        })
        setTimeout(function() {
            event.reply("enable-inject-btn")
        },2000)
        return event.reply("set-inject-btn-text","Failed")
    }
    ;(function(cb) {
        if (arg) {
            try {
                var r = child_process.spawnSync(`/bin/bash`,[ `-c`, `killall Terminal;osascript -e \"tell application \\\"Terminal\\\"\" -e \"do script \\\"clear;cd ${DEFAULT_CAPPS_LOCATION};sudo ${path.join(DEFAULT_CAPPS_LOCATION,"lib2proc")} ${pid} ${path.join(DEFAULT_CAPPS_LOCATION,"libFluxus.dylib")};sleep 2;killall Terminal\\\"\" -e \"activate\" -e \"end tell\" & osascript -e \"tell application \\\"Terminal\\\"\" -e \"activate\" -e \"end tell\"`])
                cb(undefined,"status: success",r.stderr.toString())
            } catch(e) { cb(e,"","") }
        } else {
            require("sudo-prompt").exec(`cd ${DEFAULT_CAPPS_LOCATION};${path.join(DEFAULT_CAPPS_LOCATION,"lib2proc")} ${pid} ${path.join(DEFAULT_CAPPS_LOCATION,"libFluxus.dylib")}`, {name: "Jellyfish"},cb)
        }
    })(function(e,stdout,stderr) {
        console.log(e,stdout ? stdout.toString() : "(no stdout)",stderr ? stderr.toString() : "(no stderr)")
        if (e) {
            dialog.showMessageBoxSync(win,{
                message: "Error while requesting super-user permissions",
                detail: e.toString(),
            })
            setTimeout(function() {
                event.reply("enable-inject-btn")
            },2000)
            return event.reply("set-inject-btn-text","Failed")
        }
        if (stdout.includes("status: success")) {
            setTimeout(function() {
                event.reply("enable-inject-btn")
            },2000)
            if (firstInject) {
                firstInject = false
                if (dialog.showMessageBoxSync(win,{
                    message: "Fluxus injected.",
                    detail: "Enjoying Jellyfish? Consider donating for more updates and features.",
                    buttons: ["Sure","Dismiss"],
                    defaultId: 1,
                }) != 1) {
                    child_process.spawnSync("open",["https://thelmgn.com/donate.html"])
                }
                
            }
            return event.reply("set-inject-btn-text","Injected")
        }
        if (stdout.includes("could not fetch library")) {
            setTimeout(function() {
                event.reply("enable-inject-btn")
            },2000)
            dialog.showMessageBoxSync(win,{
                message: "Error occured while injecting",
                detail: "Please go to 'Tools' and toggle 'Alternative elevation method'.",
            })
            return event.reply("set-inject-btn-text","Failed")
        }
        
        dialog.showMessageBoxSync(win,{
            message: "Error occured while injecting",
            detail: stdout,
        })
        setTimeout(function() {
            event.reply("enable-inject-btn")
        },2000)
        return event.reply("set-inject-btn-text","Failed")
        
    })
}

module.exports = {init,downloadInitialScripts,checkCreds,inject,runScript}
