
if (process.platform != "win32") return module.exports = require("./null");



const { dialog } = require('electron')
const fs = require("fs")
const path = require("path")
const child_process = require('child_process')
const fetch = require("node-fetch")
const net = require("net")
const ps = require("ps-node")
const wpm = require("windows-process-manager")

JELLYFISH_DATA_DIR = global.JELLYFISH_DATA_DIR


function init() {}

function downloadInitialScripts() {}


process.on("uncaughtException",console.error)
function runScript(arg) {
    try {
        var c = net.connect("\\\\.\\pipe\\krnlpipe",() => {
            c.end(arg)
            win.webContents.send("script-ran")
        })
    } catch(e) {}
}

var firstInject = true



async function update() {
    var df = await fetch("https://cdn.krnl.rocks/bootstrapper/files/krnl.dll")
    var ws = fs.createWriteStream(path.join(JELLYFISH_DATA_DIR,"krnl.dll"))
    df.body.pipe(ws)    
    return new Promise((a,r)=>{df.body.on("end",()=>{ws.end();a(true)})})
}


function getRobloxPid() {
    return new Promise(function(a,r) {
         ps.lookup({
             command: 'RobloxPlayer',
             }, function(err, resultList ) {
                 if (err) r(err);
                 if (!resultList[0]) return a(0);
                 a(resultList[0].pid)
         });
    })
 }

async function inject(event,arg) {
    var win = global.win
    event.reply("set-inject-btn-text","Updating")
    var updated = await update()
    
    event.reply("set-inject-btn-text","Finding Roblox")
    console.time("Finding Roblox PID")
    var pid = parseInt(await getRobloxPid())
    console.timeEnd("Finding Roblox PID")
    if (!pid) {
        dialog.showMessageBoxSync(win,{
            message: "Open Roblox",
            detail: "We can't inject into Roblox, due to it well, not being there. Join a game and have another go.",
        })
        event.reply("set-inject-btn-text","Open Roblox")
        return setTimeout(function() {
            event.reply("enable-inject-btn")
        },2000)
        return
    }
    event.reply("set-inject-btn-text","Injecting")
    try {
        await wpm.injectDll(pid,path.join(JELLYFISH_DATA_DIR,"krnl.dll"))
        if (dialog.showMessageBoxSync(win,{
            message: "Krnl injected.",
            detail: "Enjoying Jellyfish? Consider donating for more updates and features.",
            buttons: ["Sure","Dismiss"],
            defaultId: 1,
        }) != 1) {
            child_process.spawnSync("cmd",["/s","/c","start","https://thelmgn.com/donate.html","/b"])
        }
        event.reply("set-inject-btn-text","Injected")
        return setTimeout(function() {
            event.reply("enable-inject-btn")
        },2000)
    } catch(e) {
        dialog.showMessageBoxSync(win,{
            message: "Oops.",
            detail: "An error happened.\n\n" + e.toString(),
        })
        event.reply("set-inject-btn-text","Error")
        return setTimeout(function() {
            event.reply("enable-inject-btn")
        },2000)
    }
}

module.exports = {init,downloadInitialScripts,inject,runScript}