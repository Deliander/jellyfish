
if (process.platform != "darwin") return require("./null");



const { dialog } = require('electron')
const fs = require("fs")
const path = require("path")
const homedir = require('os').homedir();
const child_process = require('child_process')
const fetch = require("node-fetch")
const ps = require("ps-node")

const DEFAULT_CAPPS_LOCATION = path.join(homedir,"Documents","Fluxus")
JELLYFISH_DATA_DIR = global.JELLYFISH_DATA_DIR


function init() {
    if (!fs.existsSync("/tmp/script")) {
        fs.writeFileSync("/tmp/script","")
    }
    child_process.execSync(`rm -rf "${DEFAULT_CAPPS_LOCATION}";mkdir "${DEFAULT_CAPPS_LOCATION}";cd ${DEFAULT_CAPPS_LOCATION}; curl https://raw.githubusercontent.com/machport/FluxusResources/master/Fluxus.zip > deps.zip;unzip deps.zip;rm -rf deps.zip __MACOSX;`)
    watch()
}
var lastUpdate = 0
    
function watch() {
    fs.watch("/tmp/script").on("change",() => {
        if (process.uptime() - lastUpdate > 0.01) {
            console.log("noooo! you cant just have an icon spin as confirmation")
            win.webContents.send("script-ran")
            watch()
        }
        lastUpdate = process.uptime()
    })
}
function downloadInitialScripts() {
    
}

function runScript(arg) {
    fs.writeFileSync("/tmp/script", arg)
}

var firstInject = true


async function needsToLogin() {
    return false;
}


async function update() {
    child_process.execSync('curl -s "https://raw.githubusercontent.com/machport/FluxusResources/master/libCottonPicker.dylib" > "' + path.join(DEFAULT_CAPPS_LOCATION,"libCottonPicker.dylib") + '"')
    
}

async function checkCreds(event,arg) {
    event.reply("login-success")
    setTimeout(function() {
        event.reply("enable-inject-btn")
    },2000)
        return true
    
}

function getRobloxPid() {
   return new Promise(function(a,r) {
        ps.lookup({
            command: 'RobloxPlayer',
            }, function(err, resultList ) {
                if (err) r(err);
            
                a(resultList[0].pid)
        });
   })
}

async function inject(event,arg) {
    var win = global.win
    event.reply("set-inject-btn-text","Updating")
    await update()

    event.reply("set-inject-btn-text","Injecting")
    runScript(`local function callback(text)
    game:shutdown()
    end
    local bindableFunction = Instance.new("BindableFunction")
    bindableFunction.OnInvoke = callback
    
    game.StarterGui:SetCore("SendNotification", {
        Title = "Jellyfish for Fluxus";
        Text = "Fluxus has been successfully injected"; 
        Callback = bindableFunction;
        Button1 = "Exit";
    })
   --[[while wait(1) do
        pcall(function()
            game:HttpGet("http://localhost:7964/?messageType=ping&gameId=" .. game.GameId .. "&gameName=" .. game:GetService("HttpService"):UrlEncode(game.Name))
        end)
    end]]
    `)
    var pid = await getRobloxPid()
    ;(function(cb) {
        if (arg) {
            try {
                var r = child_process.spawnSync(`/bin/bash`,[ `-c`, `killall Terminal;osascript -e \"tell application \\\"Terminal\\\"\" -e \"do script \\\"clear;cd ${DEFAULT_CAPPS_LOCATION};sudo ${path.join(DEFAULT_CAPPS_LOCATION,"lib2proc")} ${pid} ${path.join(DEFAULT_CAPPS_LOCATION,"libCottonPicker.dylib")};sleep 2;killall Terminal\\\"\" -e \"activate\" -e \"end tell\" & osascript -e \"tell application \\\"Terminal\\\"\" -e \"activate\" -e \"end tell\"`])
                cb(undefined,"status: success",r.stderr.toString())
            } catch(e) { cb(e,"","") }
        } else {
            require("sudo-prompt").exec(`cd ${DEFAULT_CAPPS_LOCATION};${path.join(DEFAULT_CAPPS_LOCATION,"lib2proc")} ${pid} ${path.join(DEFAULT_CAPPS_LOCATION,"libCottonPicker.dylib")}`, {name: "Jellyfish"},cb)
        }
    })(function(e,stdout,stderr) {
        console.log(e,stdout ? stdout.toString() : "(no stdout)",stderr ? stderr.toString() : "(no stderr)")
        if (e) {
            dialog.showMessageBoxSync(win,{
                message: "Error while requesting super-user permissions",
                detail: e.toString(),
            })
            setTimeout(function() {
                event.reply("enable-inject-btn")
            },2000)
            return event.reply("set-inject-btn-text","Failed")
        }
        if (stdout.includes("invalid pid")) { 
            dialog.showMessageBoxSync(win,{
                message: "Roblox isn't running",
                detail: "We couldn't inject into Roblox, well, because there's no Roblox to inject into!",
            })
            setTimeout(function() {
                event.reply("enable-inject-btn")
            },2000)
            return event.reply("set-inject-btn-text","Failed")
        }
        if (stdout.includes("status: success")) {
            setTimeout(function() {
                event.reply("enable-inject-btn")
            },2000)
            if (firstInject) {
                firstInject = false
                if (dialog.showMessageBoxSync(win,{
                    message: "Fluxus injected.",
                    detail: "Enjoying Jellyfish? Consider donating for more updates and features.",
                    buttons: ["Sure","Dismiss"],
                    defaultId: 1,
                }) != 1) {
                    child_process.spawnSync("open",["https://thelmgn.com/donate.html"])
                }
                
            }
            return event.reply("set-inject-btn-text","Injected")
        }
        if (stdout.includes("could not fetch library")) {
            setTimeout(function() {
                event.reply("enable-inject-btn")
            },2000)
            dialog.showMessageBoxSync(win,{
                message: "Error occured while injecting",
                detail: "Please go to 'Tools' and toggle 'Alternative elevation method'.",
            })
            return event.reply("set-inject-btn-text","Failed")
        }
        
        dialog.showMessageBoxSync(win,{
            message: "Error occured while injecting",
            detail: stdout,
        })
        setTimeout(function() {
            event.reply("enable-inject-btn")
        },2000)
        return event.reply("set-inject-btn-text","Failed")
        
    })
}

module.exports = {init,downloadInitialScripts,checkCreds,inject,runScript}
