
if (process.platform != "win32") return module.exports = require("./null");


const prompt = require('../electron-prompt/lib/index');
const { dialog, app } = require('electron')
const fs = require("fs")
const path = require("path")
const child_process = require('child_process')
const fetch = require("node-fetch")
const net = require("net")
const wpm = require("windows-process-manager")
const ps = require("ps-node");

JELLYFISH_DATA_DIR = global.JELLYFISH_DATA_DIR


function init() {}

function downloadInitialScripts() {}

var pid = 0

process.on("uncaughtException",console.error)

function runScript(arg) {
    try {
        var c = net.connect("\\\\.\\pipe\\stopskiddingmypipe" + pid.toString())
        c.end(arg)
        win.webContents.send("script-ran")
    } catch(e) {}
}



var firstInject = true



async function update() {
    var vf = await fetch("https://fluxteam.xyz/dll")
    var vv = await vf.text()
    var df = await fetch(vv)
    var ws = fs.createWriteStream(path.join(JELLYFISH_DATA_DIR,"FluxusTeamAPI.dll"))
    df.body.pipe(ws)    
    return new Promise((a,r)=>{df.body.on("end",()=>{ws.end();a(true)})})
}

function getHwid() {
    var vss = require("child_process").spawnSync("cmd",["/C","vol","C:"]).stdout.toString().split("Volume Serial Number is ")[1].split("\r")[0]
    var vsn = parseInt(vss.replace("-",""),16)
    var usr = require("os").userInfo().username;
    var hwid = Buffer.from(usr+vsn).toString("base64");
    return hwid.replace(/=/g,"1")
}

async function manuallyGetKey() {
    var hwid = global.hwid || getHwid()
    global.hwid = hwid  
    console.log("hwid is ",hwid)
    var keyFile = hwid
    console.log("Saved key",keyFile)
    var validated = await (await fetch(`https://fluxteam.xyz/ks/checkpoint/Verify.php?Key=${encodeURIComponent(hwid)}&HWID=${encodeURIComponent(hwid)}`)).text()
    console.log(validated)
    if (validated == hwid) {
        return validated
    }
    child_process.spawnSync("cmd",["/s","/c","start",`https://fluxteam.xyz/ks/checkpoint/Start.php?HWID=${encodeURIComponent(hwid)}`,"/b"])
    var inputKey = await prompt({
        title: "Please enter a Fluxus Key",
        label: `If you don't have a key, please <a  href="javascript:require('child_process').spawnSync('cmd',['/s','/c','start',\`https://fluxteam.xyz/ks/checkpoint/Start.php?HWID=${encodeURIComponent(hwid)}\`,'/b'])">get one</a>`,
        value: hwid,
        useHtmlLabel:true,
        type: "input"
    },global.win)
    if (inputKey === null) return "no"
    var response = await fetch(`https://fluxteam.xyz/ks/checkpoint/Verify.php?Key=${inputKey}=&HWID=${hwid}`)
    var responseTxt = await response.text()
    console.log("Response",responseTxt)
    if (responseTxt.startsWith("no")) {
        return manuallyGetKey()
    } else {
        return responseTxt
    }
}

function getRobloxPid() {
    return new Promise(function(a,r) {
         ps.lookup({
             command: 'RobloxPlayer',
             }, function(err, resultList ) {
                 if (err) r(err);
                 if (!resultList[0]) return a(0);
                 a(resultList[0].pid)
         });
    })
 }

async function inject(event,arg) {
    var win = global.win
    event.reply("set-inject-btn-text","Validating key")
    if (await manuallyGetKey() == "no") {
        setTimeout(function() {
            event.reply("enable-inject-btn")
        },2000)
        return event.reply("set-inject-btn-text","Cancelled")
    }

    event.reply("set-inject-btn-text","Updating")
    var updated = await update()
    event.reply("set-inject-btn-text","Finding Roblox")
    console.time("Finding Roblox PID")
    pid = parseInt(await getRobloxPid())
    console.timeEnd("Finding Roblox PID")
    if (!pid) {
        dialog.showMessageBoxSync(win,{
            message: "Open Roblox",
            detail: "We can't inject into Roblox, due to it well, not being there. Join a game and have another go.",
        })
        event.reply("set-inject-btn-text","Open Roblox")
        return setTimeout(function() {
            event.reply("enable-inject-btn")
        },2000)
    }
    event.reply("set-inject-btn-text","Injecting")
    try {
        await wpm.injectDll(pid,path.join(JELLYFISH_DATA_DIR,"FluxusTeamAPI.dll"))
        if (dialog.showMessageBoxSync(win,{
            message: "Fluxus injected.",
            detail: "Enjoying Jellyfish? Consider donating for more updates and features.",
            buttons: ["Sure","Dismiss"],
            defaultId: 1,
        }) != 1) {
            child_process.spawnSync("cmd",["/s","/c","start","https://thelmgn.com/donate.html","/b"])
        }
        event.reply("set-inject-btn-text","Injected")
        return setTimeout(function() {
            event.reply("enable-inject-btn")
        },2000)
    } catch(e) {
        dialog.showMessageBoxSync(win,{
            message: "Oops.",
            detail: "An error happened.\n\n" + e.toString(),
        })
        event.reply("set-inject-btn-text","Error")
        return setTimeout(function() {
            event.reply("enable-inject-btn")
        },2000)
    }
}

module.exports = {init,downloadInitialScripts,inject,runScript}