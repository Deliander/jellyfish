
if (process.platform != "darwin") return module.exports = require("./null");




const { dialog } = require('electron')
const fs = require("fs")
const path = require("path")
const homedir = require('os').homedir();
const child_process = require('child_process')
const fetch = require("node-fetch");
const { env } = require("process");


const CALAMARI_API_LOCATION = "/Users/Shared/sweetheartofsigmachi/"
const DEFAULT_CAPPS_LOCATION ="/Users/Shared/sweetheartofsigmachi/"

global.CALAMARI_API_LOCATION = CALAMARI_API_LOCATION
global.DEFAULT_CAPPS_LOCATION = DEFAULT_CAPPS_LOCATION
JELLYFISH_DATA_DIR = global.JELLYFISH_DATA_DIR
if (!fs.existsSync(path.join("/Applications/sweetheart of sigma chi.app/"))) {
    var installCalamari = dialog.showMessageBoxSync({
        type: "error",
        buttons: ["Okay!","Use nullExploit"],
        defaultId: 0,
        message: "SSC not installed",
        detail: "SSC is not installed, please go to the download page and **inject SSC at least once before trying again with Jellyfish**",
    })
    console.log(installCalamari)
    if (installCalamari == 1) {
        return module.exports = require("./null")
    } else {
        child_process.execSync(`open https://sweetheart-of-sigma-chi.com/download/`)
        process.exit()
    }
}

function init() {
   

    console.log(CALAMARI_API_LOCATION)
    if (!fs.existsSync(CALAMARI_API_LOCATION)) {
        fs.mkdirSync(CALAMARI_API_LOCATION)
    }
    if (!fs.existsSync(path.join(CALAMARI_API_LOCATION,"scriptbox.txt"))) {
        fs.writeFileSync(path.join(CALAMARI_API_LOCATION,"scriptbox.txt"),"")
    }
    watch()
}
var lastUpdate = 0
    
function watch() {
    /*fs.watch(path.join(CALAMARI_API_LOCATION,"scriptbox.txt")).on("change",() => {
        if (process.uptime() - lastUpdate > 0.01) {
            console.log("noooo! you cant just have an icon spin as confirmation")
            try {win.webContents.send("script-ran") } catch(e) {process.exit()}
            watch()
        }
        lastUpdate = process.uptime()
    })*/
}
function downloadInitialScripts() {
    
}

function runScript(arg) {
    fs.writeFileSync(path.join(CALAMARI_API_LOCATION,"scriptbox.txt"),"0" + arg)
}

var firstInject = true

function getTitle(text) {
    t = new String(text)
    if (t.startsWith("ERROR-")) { return t.replace("ERROR-","")}
    if (t.includes("<title>")) {
        return t.split("<title>")[1].split("</title>")[0]
    }
    return t
}


async function update() {
    // /child_process.execSync('curl -s  > "' + path.join(DEFAULT_CAPPS_LOCATION,"libChomp.dylib") + '"')
    var res = await fetch('https://cdn.calamari.cc/ssc/libChomp.dylib')
    var first = true
    var fail = false
    var dest = fs.createWriteStream(path.join(DEFAULT_CAPPS_LOCATION,"libChomp.dylib"));
    res.body.on("data",(d) => {
        if (first && (d[0] != 207 || d[1] != 250 || d[2] != 237 || d[3] != 254)) {
            console.log(d.toString())
            console.log(d[0], d[1], d[2], d[3])
            console.log(d[0] != 207,d[1] != 250,d[2] != 237, d[3] != 254)
            throw Error("Downloaded file wasn't a valid Mach-O binary.\n\nCheck the Calamari Discord, or Jellyfish logs.\n\n" + getTitle(d))
        }
        first = false
        if (!fail) {
            if (!dest) {dest = fs.createWriteStream(path.join(DEFAULT_CAPPS_LOCATION,"libChomp.dylib"));}
            dest.write(d)
        }
    })
    return (() => {return new Promise((a,r) => {res.body.on("end",a)})})()
    
    res.body.pipe(dest);
    
}



async function inject(event,arg) {
    var win = global.win
    //if (!(await checkCreds(event,arg))) { return false}
    event.reply("set-inject-btn-text","Updating")
    await update()

    event.reply("set-inject-btn-text","Injecting")
    ;(function(cb) {
        if (arg) {
            try {
                fs.writeFileSync("/tmp/askpass.osascript.js",`#!/usr/bin/env osascript -l JavaScript

                /* DON'T BE ALARMED! 
                   This is a file used by Jellyfish to ask for your password when your password is required to inject */
                
                ObjC.import('stdlib')
                
                const app = Application.currentApplication()
                app.includeStandardAdditions = true
                
                const result = app.displayDialog('Please enter your macOS password', {
                  defaultAnswer: '',
                  withIcon: 'caution',
                  buttons: ['Cancel', 'Ok'],
                  defaultButton: 'Ok',
                  hiddenAnswer: true,
                })
                
                if (result.buttonReturned === 'Ok') {
                  result.textReturned
                } else {
                  $.exit(255)
                }
                
                `)
                fs.chmodSync("/tmp/askpass.osascript.js","777")
                child_process.execFile("sudo",["--askpass","/Applications/sweetheart of sigma chi.app/Contents/MacOS/sweetheart of sigma chi"], {
                    encoding: 'utf8',
                    env: {
                        PATH: env.PATH,
                        SUDO_ASKPASS: "/tmp/askpass.osascript.js",
                    }},cb)
            } catch(e) { cb(e,"","") }
        } else {
            require("sudo-prompt").exec("\"/Applications/sweetheart of sigma chi.app/Contents/MacOS/sweetheart of sigma chi\"", {name: "Jellyfish"},cb)
        }
    })(function(e,stdout,stderr) {
        dialog.showMessageBoxSync(win,{
            message: "Injection failed",
            detail: "Try again? Error Details:\n\n" +stderr + stdout + e.toString(),
            buttons: ["Dismiss"],
            defaultId: 1,
        })
        event.reply("enable-inject-btn")
    })
    event.reply("set-inject-btn-text","Auto-Injecting")
    if (firstInject) {
        firstInject = false
        if (dialog.showMessageBoxSync(win,{
            message: "Enjoying Jellyfish?",
            detail: "Consider donating for more updates and features.",
            buttons: ["Sure","Dismiss"],
            defaultId: 1,
        }) != 1) {
            child_process.spawnSync("open",["https://thelmgn.com/donate.html"])
        }
        
    }
    return 
}

module.exports = {init,downloadInitialScripts,inject,runScript}